import random
from Bandit import Bandit
from Agent import Agent
import matplotlib.pyplot as plt
import numpy as np

def Result_display(tuple:tuple):

    for i in range(tuple["Num"]):
        print("====================================================================")
        print("Bandit No.{}".format(i))
        print("Exploration: {} / Exploitation: {}".format(tuple["Exploration"][i], tuple["Exploitation"][i]))
        print("Count of Action: {} / total of Action: {}".format(tuple["Nt_ls"][i],tuple["Env_state"]))
        print("Action Value: {} / Bandit Success Rate: {}".format(tuple["Qt_ls"][i], tuple["Bandit_success_rate_ls"][i]))
        print("Return: {}".format(tuple["Return_ls"][i]))
        print("====================================================================")

def Graph_display(tuple:tuple):
    t = np.linspace(1, tuple["Num"], tuple["Num"])

    plt.plot(t, tuple["Qt_ls"][0], label = '0')
    plt.legend(['Qt0_1_plot_ls', 'Qt0_2_plot_ls', 'Qt0_3_plot_ls'])
    plt.show()


def RL_Cycle(N:int, c:float, explo_algorithm:str, Agent:Agent, Bandit:Bandit):
    env_state = 1
    reward = 0
    Qt_all =0

    for i in range(N):
        if explo_algorithm == "e_greedy":
            action = Agent.epsilon_greedy(c) 
        elif explo_algorithm == "UCB":
            action = Agent.upper_confidence_bounds(c, env_state)

        reward, env_state = Bandit.Environment(action)

        Qt_ls, Return_ls = Agent.Update_action(reward, action)

        if(i == 0):
            Qt_all = np.array([Qt_ls])
        else:
            Qt_np = np.array([Qt_ls])
            Qt_all = np.concatenate((Qt_all, Qt_np), axis=0)

        if(i == 0):
            Return_all = np.array([Return_ls])
        else:
            Return_np = np.array([Return_ls])
            Return_all = np.concatenate((Return_all, Return_np), axis=0)

    if explo_algorithm == "e_greedy":
        Data_tuple = {"Bandit_success_rate_ls": Bandit.Bandit_success_rate_ls, "Num":Agent.Num, "Exploration":Agent.Exploration_ls, "Exploitation":Agent.Exploitation_ls, "Nt_ls":Agent.Nt_ls, "Env_state":env_state, "Qt_ls":Qt_ls, "Return_ls":Return_ls }
        Display_tuple = {"Qt_all":Qt_all, "Return_all":Return_all}
        Result_display(Data_tuple)
    
    elif explo_algorithm == "UCB":
        Data_tuple = {"Bandit_success_rate_ls": Bandit.Bandit_success_rate_ls, "Num":Agent.Num, "Exploration":Agent.Exploration_ls, "Exploitation":Agent.Exploitation_ls, "Nt_ls":Agent.Nt_ls, "Env_state":env_state, "Qt_ls":Qt_ls, "Ut_ls":Agent.Ut_ls, "QsU_ls":Agent.QsU_ls, "Return_ls":Return_ls, "QsU_ls":Agent.QsU_ls}
        Display_tuple = {"Qt_all":Qt_all, "Return_all":Return_all}
        Result_display(Data_tuple)
    
    return Data_tuple, Display_tuple

N = 3
iteration = 1000

Bandit_1 = Bandit(N)

# Generate Distribution of Bandits
Bandit_success_rate_ls = Bandit_1.Bandits_generator(Bandit_success_rate_ls=[90, 10, 10])

Agent_1 = Agent(N)   
Agent_2 = Agent(N)   
Agent_3 = Agent(N)   

e_greedy_tuple1, Qt_all1, Return_all1 = RL_Cycle(N=iteration, c=0.1, explo_algorithm="e_greedy", Agent=Agent_1, Bandit=Bandit_1)
e_greedy_tuple2, Qt_all2, Return_all2 = RL_Cycle(N=iteration, c=0.5, explo_algorithm="e_greedy", Agent=Agent_2, Bandit=Bandit_1)
e_greedy_tuple3, Qt_all3, Return_all3 = RL_Cycle(N=iteration, c=0.9, explo_algorithm="e_greedy", Agent=Agent_3, Bandit=Bandit_1)

t = np.linspace(1, iteration, iteration)

fig, (axs1, axs2, axs3) = plt.subplots(3, 1, figsize = (18, 12))
# plot2 = plt.subplot(3,3)  
# plot3 = plt.subplot(3,3) 

# t = np.linspace(1, iteration, iteration)
axs1.plot(t, Qt_all1[:,0], label = '00')
axs1.set_title('e = 0.1') 
axs2.plot(t, Qt_all2[:,0], label = '11')
axs2.set_title('e = 0.5') 
axs3.plot(t, Qt_all3[:,0], label = '22')
axs3.set_title("e = 0.9")
plt.legend()
plt.show()

plt.plot(t, Return_all1[:,0], label = '0')
# plt.plot(t, Return_all1[:,1], label = '0')
# plt.plot(t, Return_all1[:,2], label = '0')
plt.plot(t, Return_all2[:,0], label = '1')
# plt.plot(t, Return_all2[:,1], label = '0')
# plt.plot(t, Return_all2[:,2], label = '0')
plt.plot(t, Return_all3[:,0], label = '2')
# plt.plot(t, Return_all3[:,1], label = '0')
# plt.plot(t, Return_all3[:,2], label = '0')
plt.legend()
plt.show()




# for i in range(N):

#     action = Agent_10.epsilon_greedy(0) 

#     reward, env_state = Bandit_10.Environment(action)

#     Qt_ls = Agent_10.Update_action(reward, action)

#     Qt0_1_plot_ls.append(Qt_ls[0])
#     R0_plot_ls.append(reward)

# print(Qt_ls)
# print(Agent_10.Return_ls)
# print("Exploration: {}".format(Agent_10.Exploration))
# print("Exploitation: {}".format(Agent_10.Exploitation))

# Agent_10 = Agent(10)

# for i in range(N):

#     action = Agent_10.epsilon_greedy(0.5)

#     reward, env_state = Bandit_10.Environment(action)

#     Qt_ls = Agent_10.Update_action(reward, action)

#     Qt0_2_plot_ls.append(Qt_ls[0])
#     R0_plot_ls.append(reward)

# print(Qt_ls)
# print(Agent_10.Return_ls)
# print("Exploration: {}".format(Agent_10.Exploration))
# print("Exploitation: {}".format(Agent_10.Exploitation))

# Agent_10 = Agent(10)

# for i in range(N):

#     action = Agent_10.epsilon_greedy(1.0)

#     reward, env_state = Bandit_10.Environment(action)

#     Qt_ls = Agent_10.Update_action(reward, action)

#     Qt0_3_plot_ls.append(Qt_ls[0])
#     R0_plot_ls.append(reward)

# print(Qt_ls)
# print(Agent_10.Return_ls)
# print("Exploration: {}".format(Agent_10.Exploration))
# print("Exploitation: {}".format(Agent_10.Exploitation))

# # print(Qt_ls)
# plt.plot(t, Qt0_1_plot_ls, label = '0')
# plt.plot(t, Qt0_2_plot_ls, label = '1')
# plt.plot(t, Qt0_3_plot_ls, label = '2')
# plt.legend(['Qt0_1_plot_ls', 'Qt0_2_plot_ls', 'Qt0_3_plot_ls'])
# # plt.plot(t, R0_plot_ls)
# plt.show()
    